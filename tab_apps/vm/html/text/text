<p style="float:right;">&copy;Васильев Б.П.</p>
<h1>Организация рабочего места</h1>

<h2>Устанавливаем и настраиваем виртуалку</h2>

<p>Для того, чтобы писать свои первые проекты на Django, вам потребуется ОС Linux с установленным Django. Для того, чтобы уж точно не было расхождений того, что делаем и что от этого получается мы, и того, что делаете вы и что от этого у вас получается, предлагаем вам скачать образ виртуальной машины, чтобы все проекты делать там. Мы постараемся в течение ближайшего года настроить механизм удалённой поддержки для ваших творческих начинаний. <a href="https://yadi.sk/d/w9iEfIrS3LKZrT" target="_blank">Вот ссылка</a> на виртуальную машину.</p>
<p>После того, как вы скачали образ виртуальной машины, вам необходимо установить на своём компьютере программу <a href="https://www.virtualbox.org/" target="_blank">VirtualBox</a> (виртуальная машина). Если у вас она уже стоит, то вам её ещё раз ставить, конечно же, не нужно :)</p>
<p>Ну вот, у вас установлена VirtualBox и где-то рядом лежит нам образ ОС Linux. Вам необходимо запустить VirtualBox.</p>
<img src="/static/tab_apps/vm/html/text/vb_empty.png"></img>
<p>Далее, в меню "Файл" выберите пункт "Импорт конфигураций" - вот там вам и пригодится скачанный у нас образ ОС Linux. Виртуальная машина будет у вас "откушивать" 512МБ оперативной памяти, на жёстком диске со временем может раздуться максимум до 12ГБ (в исходном состоянии занимает 7.4ГБ). Образ мы максимально оптимизировали, чтобы слабый компьютер не являлся для вас препятствием в деле изучения программирования. </p>

<h2>Запускаем виртуалку: особенности нашего образа ОС Linux</h2>
<p>Ну вот, вы выбрали виртуальную машину "traliva ..." и запустили. Когда спросят пароль - пароль от пользователя user - 12345678.</p>
<p>Использованный дистрибутив linux - Ubuntu 16(LTS). Пароль суперпользователя я не задавал - наберите в консоли "sudo bash" и вы окажетесь в консоли авторизованными как суперпользователь.</p>
<p>На рабочем столе видите шпаргалку по сочетаниям клавиш на клавиатуре (хоткеям). Запустите консоль (она же, терминал), нажав <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Wind /static/tab_apps/vm/html/text/ 1(Num)</span>. После нажатия хоткея следует дождаться появления окна (будет чёрный экран с приглашением командной строки - это и есть консоль) - вот теперь нажмите <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Wind /static/tab_apps/vm/html/text/ W</span>. Консоль исчезла. Это вы перешли с рабочего стола "Q" на рабочий стол "W" (посмотрите на клавиатуру - мы как бы мысленно наши окошки прикрепляем к разным клавишам на нашей клавиатуре). Alt-Tab (переключение между окнами) работает только в рамках одного рабочего стола.</p>
<p>У нас всего есть 26 рабочих столов - столько, сколько букв в латинском алфавите. При входе в систему вы видите рабочий стол "Q" (т.е. левый верхний угол нашей клавиатуры). Для перехода на какой-то рабочий стол нажмиет на клавиатуре <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Wind /static/tab_apps/vm/html/text/ XX</span>, где XX - буква рабочего стола.</p>
<p>Например вот, когда я записываю видеоролики с тем, как мы пишем тот или иной пример из нашего руководства, у меня обычно запущены окна в следующих рабочих столах:</p>
<ul>
<li>Q - та, маленькая, консоль, которая попадает на видеозапись</li>
<li>W - то, маленькое, окно firefox-а, которое попадает на видеозапись</li>
<li>L - здесь у меня запущена программа видеозахвата</li>
<li>N - консоль с регулировкой громкости (alsamixer)</li>
<li>M - здесь у меня обычно бывает два окна - консоль, из которой я просматриваю получившееся видео, и firefox, на котором тихонько воспроизводится музыка</li>
</ul>
<p>А теперь посмотрите, где расположены эти клавиши на клавиатуре, и, возможно, вы согласитесь со мной, что это удобно. Я переключаюсь между рабочими столами, даже не задумываясь, каким буквам они соответствуют - я знаю только, ГДЕ находятся клавиши, соответствующие рабочим столам, с которыми я работаю. А на одном рабочем столе я стараюсь держать не более одного окна - так что в моём случае переключение между рабочими столами практически равносильно переключению между окнами - с любого на любое одним касанием клавиатуры.</p>
<p>Сворачивать окна в нашей версии Linux нельзя - так что если вы видите шпаргалку на рабочем столе NN, значит там нет никаких окон. Чтобы увидеть шпаргалку с хоткеями, просто перейдите на рабочий стол, на котором у вас нет запущенных окон.</p>
<p>Чтобы выключить компьютер на виртуальной машине, запустите консоль (Wind /static/tab_apps/vm/html/text/ 1(Num)) и введите команду "poweroff"</p>
<p>Чтобы переключить ваши мышь и клавиатуру с виртуальной машины в вашу осносную систему, просто нажмите правый ^&lt;Ctrl>.</p>
<p>Мы использовали нестандартный для Ubuntu менеджер рабочих столов. Если вы захотите выйти из нашего оконного менеджера (Openbox) и загрузить стандартный Ubuntu-овский оконный менеджер (Unity), наберите в консоли команду "openbox --exit" - вы попадёте на страницу ввода пароля от учётной записи - там сможете из списка выбрать другой оконный менеджер.</p>

<h2>Основы работы в консоли</h2>
<p>После запуска консоли вы видите окно (точнее, сплошной чёрный экран...), на котором в левом верхнем углу находится так называемое "приглашение командной строки":</p>
Мама купила сыр
и пакет к нему
<img src="/static/tab_apps/vm/html/text/cons_user.png"></img>
<p>Символ "<span style="color:#f00;">$</span>" в конце строки означает, что консоль ожидает команды от пользователя.</p>
<p>Перед символом "<span style="color:#f00;">$</span>" указан путь к директории (папке), в которой вы сейчас находитесь. Для того, чтобы сменить текущую директорию, наберите команду <hl>"cd"</hl>(отправит вас в домашнюю директорию) или <hl>"cd <куда>"</hl>. Все пути в Linux ведутся от корня ("/") - здесь нет "дисков" как в Windows. Домашняя директория имеет сокращение <hl>"~"</hl>, таким образом команда "cd" эквивалентна команде "cd ~". Показать полный путь до текущей директории - <hl>"pwd"</hl>, показать содержимое текущей директории - <hl>"ls"</hl>.</p>
<p>В любой директории есть две спецдиректории - <hl>"."</hl>(сама эта директория) <hl>".."</hl>(директория уровнем выше). А ещё в директории могут быть скрытые папки и файлы - все папки и файлы, имя которых начинается с точки, являются скрытыми и не отображаются командой "ls". Чтобы посмотреть содержимое директории вместе со скрытыми файлами и папками, запутите команду <hl>"ls -a"</hl></p>
<p>Создать директорию - <hl>"mkdir"</hl>, создать файл - <hl>"touch"</hl>.</p>
<p>Если нужно создать папку в папке, которой ещё нет (например, мы хотим создать папку 1, а в ней папку 11), то это можно сделать командой mkdir с ключом -p следующим образом:</p>
<inline_code>
<shell_welcome>$</shell_welcome> mkdir -p 1/11
</inline_code>
<p>Переместить файл или папку, а также переименовать - <hl>"mv <путь_до> <путь_после>"</hl>. Вместо пути_после можете указать директорию символом "/" в конце пути (например, "mv hello.txt blabla/"). пример переименования файла: "mv old_file.txt new_file.txt". Вы можете переместить и переименовать файл или папку одной командой.</p>
<p>Копировать файл или папку - <hl>"cp <откуда> <куда>"</hl>. При копировании папок необходимо указывать ключ "-r".</p>
<p>Удалить файл или папку - <hl>"rm <что удалять>"</hl>. При удалении папок необходимо указывать ключ "-r".</p>
<p>По любой команде можно посмотреть справку - для этого наберите <hl>"man <команда>"</hl></p>
<p></p>
<p>Запускать скрипты и исполняемые файлы, лежащие в текущей директории необходимо с явным указанием, что имеется вызов не из системной директории с утилитами, а из текущей директории. Например, если в текущей директории находится скрипт manage.py, то для запуска этого скрипта необходимо набрать "./manage.py".</p>
<p>Теперь про хоткеи в консоли:</p>
<p>Стрелка вверх/вниз - подставляет предыдущую/следующую команду из истории запуска команд в консоли</p>
<p><span style="padding:2px;border:1px solid #888;border-radius: 5px;">Tab</span> - автопродолжение команды или имени файла. У пользователей Linux клавиша "Tab" самая частоиспользуемая. Вам не надо полностью писать имя файла или утилиты для запуска - набираете начало, "Tab", если с таким началом несколько файлов, нажимаете Tab два раза, и перед вами будет выведен список вариантов. Таким образом я могу открыть файл, находящийся в другой директории, даже не зная точно как он называется.</p>
<p><span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ D</span> - выход из консоли (эквивалентно команде "exit")</p>
<p><span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ L</span> - очистить содержимое консоли. Это чтобы не захламлять консоль ставшей уже ненужной информацией от команд. Если вам захочется посмотреть консольный вывод, который вы уже "очистили", прокрутите консоль вверх (или &lt;Shift> /static/tab_apps/vm/html/text/ &lt;PageUp>/&lt;PageDown>) - ничего не удалено, и всё перед вами.</p>
<p><span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ C</span> - остановить выполнение команды(скрипта или утилиты). Если вы запустили из консоли оконное приложение, то эта команда всегда надёжно "убьёт" запущенное из этой консоли оконное приложение, если оно зависло. Очень удобно - и не надо искать соответствующий процесс в системе.</p>
<p>И напоследок три команды, которые отобразят объём занимаемой памяти файлами и папками:</p>
<p><hl>"ls -lh"</hl> - выводит содержимое текущей директории с указанием размеров файлов и папок. Не смущайтесь, что все папки имеют размер 4 КБайта - в Linux-е все папки - это файлы, такие вот спецфайлы размером 4КБ.</p>
<p><hl>"du -sh"</hl> - отображает размер папки (и всего её содержимого!)</p>
<p><hl>"df -h"</hl> - отображает всю память, доступную системе. Сколько памяти всего, сколько использовано, сколько осталось свободного места на жёстких дисках, процент использованной памяти.</p>

<h2>Знакомство с VIM</h2>
<p>Все тексты у нас будут редактироваться в текстовом редакторе VIM.</p>
<h4>Почему VIM ?</h4>
<p>VIM - это, можно сказать, древний (корнями уходит в 70-е годы XX века), текстовый редактор, но который не устарел и не потерял актуальности - он стал классикой. Он полностью консольный.</p>
<p>Я по-новому взглянул на VIM, когда просто увидел, как мой коллега по работе им пользуется - это было похоже на магию. Такое ощущение, будто он считываем мысли. Секрет прост - VIM поддерживает множество команд (в один символ!) для работы с текстом. Кроме того, в VIM команды можно переопределить, добавить свои команды, подключить плагины - это уже если вас "понесло".</p>
<p>Если VIM такой крутой, то почему же все вокруг им не пользуются <span style="color:#aaa;">(хотя, поверьте, их пользователей ну о-очень много)</span>? Дело в том, что "тяжело в учении - легко в бою" - прежде чем им пользоваться им, надо сесть и изучить основы работы с этим редактором. Все возможности этого редактора вам, конечно, даже смотреть не надо - в ходе работы с редактором вы уже будете потихоньку пополнять свой багаж знаний и навыков работы с VIM - сейчас вам главное начать работать в этом редакторе. Немного времени, потраченного на изучение инструмента редактирования, окупится сторицей в дальнейшем в "чтении редатором ваших мыслей" - простоте и скорости правки текстов.</p>
<p>Мы научимся просто редактировать текст с помощью VIM - без использования каких-либо дополнительных плагинов, без переопределения команд - с помощью обычного классического VIM.</p>
<p>VIM мы запускаем командами "vi"(для редактирования) и "view"(для просмотра). <span style="color:#888;">Это сокращённая форма vim. Должен вас предупредить - на каких-то дистрибутивах Linux я встречал установленный VI вместо VIM (VI это не VIM, а тот редактор из 70-х, развитием которого является VIM), так что сразу после установки Linux необходимо установить VIM, и он будет доступен по "vi" и "view".</span></p>
<h4>Давайте поиграемся с VIM.</h4>
<p>На рынке клавиатур на сегодняшний день наблюдается редкостный зоопарк моделей клавиатур. Клавиатуры есть какие угодно, только не стандартные, и зачастую на клавиатуре попросту отсутствуют те или иные "лишние" клавиши. Поэтому привожу изображение стандартной клавиатуры:</p>
<img src="/static/tab_apps/vm/html/text/keymap_colored.png"></img>
<p><a href="" download="test.html">Скачайте</a> образец текстового документа, на котором будем практиковаться.</p>
<p>Запускаем консоль, лезем в ту директорию, куда сохранили скачанный файл ("cd ...."). Открываем на редактирование наш тестовый файл:</p>
<inline_code>
<shell_welcome>$</shell_welcome> vi <span style="color:#888;">имя_файла</span>
</inline_code>
<p>Вы находитесь в VIM. Здесь так же, как и в обычных текстовых редакторах (таких как Блокнот, Notepad, gedit и т.п.) мы можем поэкранно пролистывать текст с помощью клавиш <hl>"PageUp"</hl> и <hl>"PageDown"</hl>, перемещать курсор клавишами управления курсором (стрелки), устанавливать курсор в начало строки клавишей <hl>"Home"</hl> и устанавливать курсор в конец строки клавишей <hl>"End"</hl>. Посмотрите, как работают вышеупомянутые клавиши, но пока текст не меняйте.</p>
<p>Мы можем плавно прокрутить отображаемый текст с помощью <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ E</span> и <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ Y</span>. При этом положение курсора не изменится. Мы можем перевести курсор в конец файла, нажав "G"(заглавная), перевести курсор в начало файла, введя "gg", перевести курсор на N-ную строку, введя ":" и номер строки (например, ":44<span style="padding:2px;border:1px solid #888;border-radius: 5px;">Enter</span>").</p>
<p>Прежде чем мы начнём править текст, давайте научимся выходить из VIM-а. <span style="color:#aaa;">Хоть мы и находимся в режиме команд,</span> Нажимаем <hl>"Esc"</hl>, чтобы переключиться в режим команд, и набираем (обязательно должна быть латинская раскладка клавиатуры!):.</p>
<inline_code>:q</inline_code>
<p>Вводимый вами текст должен отображаться в нижней части окна. Теперь нажимаем <hl>"Enter"</hl>.</p>
<p>Мы успешно вышли из VIM-а. Что было бы, если мы перед тем, как выходить, успели изменить текст в редактируемом файле? Вместо того, чтобы выйти, VIM напишет <span style="background:#f00;color:#fff;">Изменения не сохранены (добавьте "!", чтобы обойти проверку)</span>. Это защита от забывчивости - вдруг мы что-то поменяли, редактор напоминает вам об этом - и ждёт указаний - сохранить изменения или отбросить.</p>
<p>Если наш файл имеет изменения, которые мы не сохранили, мы должны либо выйти без сохранения изменений (команда <hl>":q!"</hl>), либо сохранить изменения и выйти (команда <hl>":wq"</hl>)</p>
<p>В ходе редактирования файла мы также можем сохранять изменения с помощью команды <hl>":w"</hl>, или можем сохранить в другой файл (аналог "сохранить как", далее команда ":w" будет сохранять изменения в тот, исходный файл) - ":w <span style="color:#888;">имя_файла</span>".</p>
<p>Следите за тем, чтобы, когда вы хотите ввести команду, VIM был в режиме ввода команды. Чтобы перевести VIM в режим ввода команды, необходимо нажать клавишу "Esc".</p>
<!--<p>Давайте снова откроем наш тестовый файл и продолжим перемещаться по файлу.</p>-->
<p>Давайте снова откроем наш тестовый файл и на этот раз уже будем его менять.</p>
<p>Перейдём на 44-ю строку и напишем после этой строки "Мама купила сыр.".</p>
<inline_code>
<!--&lt;Esc> - мы перешли в режим ввода команды<br/>-->
:44 &lt;Enter> - мы перешли на 44-ю строку<br/>
o - вставляем строку после текущей строки (O - вставляет строку ПЕРЕД текущей строкой)<br/>
<span style="background:#aaa;color:#fff;">внизу появилась надпись "ВСТАВКА" - мы перешли в режим редактирования. Если нажмёте "Insert", вместо "ВСТАВКА" будет написано "ЗАМЕНА".</span><br/>
</inline_code><br/>
<p>Теперь переключаем раскладку клавиатуры на Русскую, и пишем "Мама купила сыр".</p>
<p>&lt;Enter></p>
<p>Пишем дальше на новой строке "и пакет к нему"</p>
<p>Переключаем раскладку клавиатуры обратно на Английскую (да, к сожалению, VIM понимает команды только по-английски...), жмём "Esc" (переводим VIM обратно в режим команд).</p>
<p>Мы знаем про клавиши <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Home</span> и <span style="padding:2px;border:1px solid #888;border-radius: 5px;">End</span>. Так вот познакомимся также и с командами перехода <hl>"0" (цифра)</hl>, <hl>"^"</hl> и <hl>"$"</hl> - первая соответствует переносу курсора в начало строки (как <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Home</span>), вторая - переносу курсора к первому непробельному символу в строке (а не к началу строки!), а третья - переносит курсор в конец строки (как <span style="padding:2px;border:1px solid #888;border-radius: 5px;">End</span>).</p>
<p>Так. Пусть мама купит также и масло.</p>
<inline_code>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">&#8593;</span> - переходим на строчку выше<br/>
$ - переводим курсор в конец строки<br/>
a - запускаем ввод текста после курсора<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">CapsLock</span> - переключаем язык на русский<br/>
 и масло - начиная с пробела<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">CapsLock</span> - переключаем язык обратно на английский<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">Esc</span> - возвращаем VIM  в режим команд<br/>
</inline_code>
<p>Командой перехода "a" ( [A]ppend - добавить ) мы начали ввод текста с позиции после курсора. Это потому, что мы были в конце строки. Если бы нам надо было начать ввод текста с текущей позиции курсора, мы бы воспользовались командой "i" ( [I]nsert - вставить ).</p>
<p>Сейчас надо во второй строке, введённой нами, заменить "нему" на "ним".</p>
<inline_code><m_title>Вариант 1</m_title><br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">&#8595;</span> - переходим на строчку ниже<br/>
$ - переводим курсор в конец строки<br/>
a - переходим в режим ввода текста с позиции после курсора<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">Backspace</span> 4 раза - удаляем "нему"<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">CapsLock</span> - переключаем язык на русский<br/>
ним<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">CapsLock</span> - переключаем язык обратно на английский<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">Esc</span> - возвращаем VIM  в режим команд<br/>
</inline_code><br/>
<p>Прежде чем повторить правку того текста, давайте откатим последнее изменение: нажмите <hl>"u"</hl>. Чтобы вернуть отменённое изменение необходимо нажать <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ R</span><br/></inline_code></p>
<inline_code><m_title>Вариант 2</m_title><br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">&#8595;</span> - переходим на строчку ниже<br/>
$ - переводим курсор в конец строки<br/>
v - входим в режим выделения (с текущей позиции курсора). Режим выделения, по терминологии VIM, называется "Визуальный режим"<br/>
b - переводим курсор к ближайшему слева началу слова<br/>
s - выходим из режима выделения вставкой текста ВМЕСТО того, что было выделено<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">CapsLock</span> - переключаем язык на русский<br/>
ним<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">CapsLock</span> - переключаем язык обратно на английский<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">Esc</span> - возвращаем VIM  в режим команд<br/>
</inline_code><br/>
<p>Мы заменили только одно слово, но ещё нагляднее будет, если мы заменим не слово, а, скажем три последних слова ("пакет к нему" заменим на "пакет к ним")</p>
<inline_code><m_title>Вариант 3</m_title><br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">&#8595;</span> - переходим на строчку ниже<br/>
$ - переводим курсор в конец строки<br/>
v - входим в режим выделения (с текущей позиции курсора)<br/>
b <span style="color:#888;">3 раза</span>- три раза переводим курсор к ближайшему слева началу слова. У нас выделены три слова: "пакет к нему".<br/>
s - выходим из режима выделения вставкой текста ВМЕСТО того, что было выделено<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">CapsLock</span> - переключаем язык на русский<br/>
пакет к ним<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">CapsLock</span> - переключаем язык обратно на английский<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">Esc</span> - возвращаем VIM  в режим команд<br/>
</inline_code><br/>
<p>Замечание по поводу того, что VIM считает словом - словом считается последовательность букв. Любая не-буква (например, дефис) разрывает слово на части. Но если вместо "b" использовать "B", то слова разрывать будут только пробельные символы.</p>
<p>Команды быстрого перемещения курсора:</p>
<ul>
<li style="color:#038;">e - переместить курсор к ближайшему концу слова (какого-либо) вперёд</li>
<li style="color:#800;">E - то же, что и "e", только знаки препинания (кроме пробела) считаются частью слова</li>
<li style="color:#038;">b - переместить курсор к ближайшему началу слова (какого-либо) назад</li>
<li style="color:#800;">B - то же, что и "b", только знаки препинания (кроме пробела) считаются частью слова</li>
<li style="color:#038;">w - переместить курсор в ближайшему началу слова (какого-либо) вперёд</li>
<li style="color:#800;">W - то же, что и "w", только знаки препинания (кроме пробела) считаются частью слова</li>
</ul>
<p>Мы познакомились с командой перехода в режим выделения. Познакомимся же и с командой выделения строк. То предложение в две строки, что мы только что ввели, мы переместим в другое место - пусть это предложение будт у нас перед 41-й строкой. Переместим курсор стрелками "вверх" и "вниз" на первую строку нашего предложения.</p>
<inline_code>
V - заглавная "V"; входим в режим выделения строк<br/>
<span style="padding:2px;border:1px solid #888;border-radius: 5px;">&#8595;</span> - переходим на строчку ниже<br/>
d - вышли из режима выделения (выделения строк) с вырезанием выделенного (в памяти сохраняется то, что было удалено)<br/>
:41 - переходим на 41-ю строку<br/>
P - заглавная "P"; вставка перед. Так как в памяти у нас фрагмент, выделенный в режиме выделения строк, то и вставка будет осуществляться перед текущей СТРОКОЙ. Если бы нас надо было вставить не перед, а после, то мы бы нажали не "P"(заглавная), а "p"(маленькая).
</inline_code>
<p>Команды копирования / вставки:</p>
<ul>
<li>d - вырезать</li>
<li>p (маленькая) - вставить после</li>
<li>P (заглавная) - вставить перед</li>
<li>y - скопировать</li>
</ul>
<p>Команды "d" и "y" действуют в режиме выделения. Но в командном режиме вы можете скопировать или удалить текущую строку, нажав "dd" или "yy" (два раза). Например, находясь в командном режиме на текоторой строке, вы легко можете продублировать текущую строку, набрав "yyp", или переместить текущую строку под следующую строку, набрав "ddp"</p>
<p>Команда "d" может использоваться и без выделения фрагмента текста. Например, команда "d0" удалит весь текст строки слева от курсора, "d^" - удалит весь текст слева от курсора до первого непробельного символа(включительно), "d$" - удалит весь текст справа от курсора до конца строки.</p>
<p style="color:#888;">Это очень интересная возможность - удалять без выделения. Приведу ещё примеры. Команда "de" удалит окончание слова, на котором находится курсор. Команда "3de" удалит три слова (перед командой мы можем указать количество применения команды). Команда "dt<span style="color:#880">какой-то_символ</span>" удалит текст справа от курсора до ближайшего <span style="color:#880">какого-то_символа</span> (оставив сам <span style="color:#880">какой-то_символ</span> на месте). Командой "ct:" вы удалите всё до ближайшего двоеточия и переключитесь в режим вставки текста - ничего не нажимая теперь можете вводить текст заместо того, что там было (в этом переключении заключается разница между командами удаления "d" и замены "c").</p>
<p>Расмотрим команды для ввода текста с клавиатуры. Следующие команды переключают VIM в режим вставки. Таким образом, если вы находитесь в командном режиме, вы нажимаете одну букву команды, и уже вводите вставляемый в нужное место текст:</p>
<ul>
<li>A (заглавная) - добавление текста в конец строки</li>
<li>I (заглавная) - вставка текста в начало строки</li>
<li>S (заглавная) - вы пишете текст ВМЕСТО текущего текста строки (т.е. вся строка удалилась, и вы пишете ту строку заново)</li>
<li>C (заглавная) - вы пишете текст ВМЕСТО того, что справа от курсора (т.е. остаток строки удаляется и вы заново пишете окончание строки)</li>
<li><hl>i (маленькая) - курсор никуда не перемещается - вы просто вводите текст там, где находится курсор</hl></li>
<li>a (маленькая) - вы пишете справа от курсора (чтобы не нажимать стрелку вправо или если вы находитесь в конце строки)</li>
<li>s (маленькая) - если вы находитесь на выделенном фрагменте, то вы вводите текст ВМЕСТО того, что выделено. Если ничего не выделено, топеред вводом удаляется символ, на котором стоял курсор (т.е. типа у нас выделен один символ был).</li>
<li>o (маленькая) - вы пишете текст в новой строке, которую редактор вставил ПОСЛЕ той, на которой находился курсор</li>
<li>O (заглавная) - вы пишете текст в новой строке, которую редактор вставил ПЕРЕД той, на которой находился курсор</li>
</ul>
<p>Как и в рамках строки, мы можем быстро перемещаться и по строкам. Командами <hl>"{"</hl> и <hl>"}"</hl> мы можем перемещаться по "параграфам" - блокам текста, разделённым пустыми строками.</p>
<p>Коль мы коснулись темы копирования, то рассмотрим ещё два примера на тему копирования.</p>
<p>Первый пример. Скопируйте какой-то фрагмент текста где-то вне вашей консоли с VIM-ом (например, с этой страницы) и вставьте в ваш тестовый текст. Для вставки такого стороннего текста необходимо перевести курсор в то место, куда должен лечь вставляемый текст, нажать "i"(или любой другой командой перейти в режим ввода текста с клавиатуры)... Сейчас вы можете вручную вводить текст, но можете и скопировать из общесистемного буфера обмена - нажмите <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Shift /static/tab_apps/vm/html/text/ Insert</span> или <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ V</span>. Ну вот, текст лёг, возвращаем VIM  в командный режим нажатием на "Esc".</p>
<p>И последний пример на копирование/вставку. Вставим текст из другого файла.</p>
<p>Скачаем <a href="" download>фрагмент кода</a> и положим его в ту же директорию, где и наш тестовый файл. Наша задача -  вставить его в наш тестовый HTML-документ. Обращаем ваше внимание, что для того, чтобы код в HTML-документе выглядел так, как мы его видим в текстовом редакторе, в конце каждой строки мы должны вставить "&lt;br/>", а также все четвёрки пробелов заменить выражением "&lt;tab>&lt;/tab>"</p>
<p>Итак, не закрывая тестового текстового документа, открываем файл с фрагментом кода.</p>
<p>Нам бы открыть этот файл не ВМЕСТО тестового, а одновременно с ним. Для этого разделим наш экран на две части. Все операции с разделением экрана на части начинаются одинаково - мы нажимаем <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ W</span>. <span style="color:#888;">Не смущайтесь, ничего на экране не отобразится.</span> Теперь набираем команду - "s" или "v" для разделения экрана на два один-под-другим или на два слева-и-справа соответсвенно.</p>
<p>Экран мы разделили. Пока в обоих половинках открыт один и тот же файл. Как нам переключаться между этими половинками: <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ W</span>  и наживаем клавишу стрелок для перехода. Ну вот, мы перешли на ту половинку, где хотим открыть другой файл (из которого нам нужно будет скопировать фрагмент). Теперь вводим команду</p>
<inline_code>:e gameplay.js</inline_code>
<p>Внизу обоих половинок VIM пишет, какой файл там открыт. Теперь выделяем интересующие нас строки текста в файле gameplay.js, копируем ("y"), переключаемся на ту половинку, где у нас тестовый файл. Переводим курсор на ту строку, после которой надо ставить скопированные из другого файла строки, и нашимаем "p". Текст мы вставили. Теперь нам надо заменить четвёрки пробелов на "&lt;tab>&lt;/tab> и в конец вставить по "&lt;br/>". Для этого воспользуемся командой замены: <hl>":s/<span style="color:#888;">что_заменяем</span>/<span style="color:#888;">на_что_заменяем</span>/g"</hl>. Выделяем те строки, где нужно произвести замену и выполняем первую команду. Потом снова выделяем <span style="color:#888;">(это можно сделать командой "gv")</span>, и вторую команду. Не забываем экранировать спецсимволы обратным слэшом ("\").</p>
<inline_code>
:s/\s\s\s\s/&lt;tab>&lt;\/tab>/g<br/>
gv <span style="color:#888;">- эта команда восстанавливает снятое выделение</span><br/>
:s/$/&lt;br\/>/g
</inline_code><br/>
<p>Про выход из файлов, открытых в VIM-е. ":q" применяется не к самому редактору, а к тому файлу, на котором вы сейчас находитесь. Так вы можете один файл закрыть без сохранения изменений, а другой - с сохранением.</p>
<p>Поиск в VIM-ме простой. Пишете "/<span style="color:#888;">что_искать</span>" и нажимаете "Enter". Всё. Листать результаты вперёд - "/", назад - "?"(та же клавиша, только с Shift-ом). Искать можно и сразу в обратном направлении - вместо "/" используйте "?". Одно неудобство - при листании результатов поиска каждый раз после "/" или "?" необходимо нажимать <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Enter</span>.</p>
<p>Ну вот, допустим, вы редактировали-редактировали себе текст, вот решили где-то что-то подсмотреть, а может и скопировать (не меняя там), как вам проще всего вернуться туда, где что-то писали: команда <hl>"`."</hl> <span style="color:#888;">(обратная кавычка - это там, где русская буква "Ё", в левом верхнем углу клавиатуры)</span> вернёт вас конкретно в то место, где вы что-то правили. Замечу, что место последней правки считается местом последней правки только в том случае, если вы там что-то меняли - переход в режим вставки заменой текста не считаеися.</p>
<p>Если во время работы с VIM-ом вам вдруг понадобилась консоль, из которой он был запущен, наберите команду ":shell" - вы её получите. Выход из консоли (нажатием <span style="padding:2px;border:1px solid #888;border-radius: 5px;">Ctrl /static/tab_apps/vm/html/text/ D</span>) вернёт вас в VIM. <span style="color:#888;">Напоминаю, что выход из VIM - ":q" или ":wq" или ":q!".</span></p>
<p>Ну вот, огромное количество информации вылилось на ваши хрупкие уши. Не пугайтесь. Как правило, новички обходятся режимом вставки ("i") и переключаются в командный режим только для сохранения - так VIM ведёт себя так же, как и любой другой Блокнот-овидный текстовый редактор. А остальные команды уже потихоньку добавляются в обиход программистов. Я приготовил для вас шпаргалку по командам VIM-а, в неё я включил только те команды, которые были выше освящены. Кликните по картинке, чтобы скачать полноразмерную версию.</p>

<a href="/static/tab_apps/vm/html/text/myvim.png" download><img width="512px" src="/static/tab_apps/vm/html/text/myvim.png"></img></a>
<p>Когда подпривыкнете к VIM-у, и ваши пальцы запомнят все команды (Боже упаси, чтобы их помнили вы сами!), можете почитать про VIM ещё. Предлагаю вам начать в ваших дальнейших поисках со следующих тем, которые я опустил:</p>
<ul>
<li>Быстрое перемещение по буквам (команды "t" и "f")</li>
<li><a href="http://vim.wikia.com/wiki/Using_marks" target="_blank">Якоря</a></li>
<li>alias-ы и что вообще настраивается в ~/.vimrc</li>
</ul>
<p>Наиболее полное руководство по VIM: <a href="https://github.com/mhinz/vim-galore" target="_blank">Здесь</a></p>

<h2>Заключение</h2>
<p>Подведём итоги. Вы настроили себе на компьютере виртуальную машину, где можете смело выполнять примеры из наших руководств и быть уверенными, что система настроена для работы должным образом. Вы получили базовые навыки с таким инструментами веб-разработчика, как Консоль и VIM. Настало время приступать, собственно, к написанию вашего первого веб-приложения. Я приглашаю вас посетить моё руководство по разработке веб-приложений на базе фреймворка Django.</p>
<p>Удачи!</p>
